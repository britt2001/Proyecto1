
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  000006d6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014bc  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099b  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000886  00000000  00000000  0000275b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00002fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053a  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ce0  00000000  00000000  000036da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000043ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3a       	cpi	r26, 0xA0	; 160
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  8e:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD8_PORT>:
	_delay_ms(10);
}

// D7...D0 E RS
void LCD8_PORT(uint16_t mascara) {
	for(int i = 0; i<10; i++){ // verifica cada posición
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	5d c0       	rjmp	.+186    	; 0x156 <LCD8_PORT+0xc0>
		if(mascara&(1<<i)){	// enciende los pines
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	04 2e       	mov	r0, r20
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <LCD8_PORT+0x12>
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	0a 94       	dec	r0
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <LCD8_PORT+0xe>
  ac:	28 23       	and	r18, r24
  ae:	39 23       	and	r19, r25
  b0:	23 2b       	or	r18, r19
  b2:	39 f1       	breq	.+78     	; 0x102 <LCD8_PORT+0x6c>
			uint8_t pin = pines[i];
  b4:	fa 01       	movw	r30, r20
  b6:	e0 50       	subi	r30, 0x00	; 0
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	20 81       	ld	r18, Z
			if(pin >= 8 && pin <= 13){
  bc:	38 ef       	ldi	r19, 0xF8	; 248
  be:	32 0f       	add	r19, r18
  c0:	36 30       	cpi	r19, 0x06	; 6
  c2:	80 f4       	brcc	.+32     	; 0xe4 <LCD8_PORT+0x4e>
				PORTB |= (1 << (pin - 8));
  c4:	e5 b1       	in	r30, 0x05	; 5
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	28 50       	subi	r18, 0x08	; 8
  ca:	31 09       	sbc	r19, r1
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	db 01       	movw	r26, r22
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <LCD8_PORT+0x42>
  d4:	aa 0f       	add	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <LCD8_PORT+0x3e>
  dc:	9d 01       	movw	r18, r26
  de:	2e 2b       	or	r18, r30
  e0:	25 b9       	out	0x05, r18	; 5
  e2:	37 c0       	rjmp	.+110    	; 0x152 <LCD8_PORT+0xbc>
				} else if (pin <= 7){
  e4:	28 30       	cpi	r18, 0x08	; 8
  e6:	a8 f5       	brcc	.+106    	; 0x152 <LCD8_PORT+0xbc>
				PORTD |= (1 << pin);	// coloca el valor en el puerto
  e8:	eb b1       	in	r30, 0x0b	; 11
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	db 01       	movw	r26, r22
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <LCD8_PORT+0x60>
  f2:	aa 0f       	add	r26, r26
  f4:	bb 1f       	adc	r27, r27
  f6:	2a 95       	dec	r18
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <LCD8_PORT+0x5c>
  fa:	9d 01       	movw	r18, r26
  fc:	2e 2b       	or	r18, r30
  fe:	2b b9       	out	0x0b, r18	; 11
 100:	28 c0       	rjmp	.+80     	; 0x152 <LCD8_PORT+0xbc>
			}
			} else { // apaga los pines
			uint8_t pin = pines[i];
 102:	fa 01       	movw	r30, r20
 104:	e0 50       	subi	r30, 0x00	; 0
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	20 81       	ld	r18, Z
			if(pin >= 8 && pin <= 13){
 10a:	38 ef       	ldi	r19, 0xF8	; 248
 10c:	32 0f       	add	r19, r18
 10e:	36 30       	cpi	r19, 0x06	; 6
 110:	88 f4       	brcc	.+34     	; 0x134 <LCD8_PORT+0x9e>
				PORTB &= ~(1 << (pin - 8));
 112:	e5 b1       	in	r30, 0x05	; 5
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	28 50       	subi	r18, 0x08	; 8
 118:	31 09       	sbc	r19, r1
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	db 01       	movw	r26, r22
 120:	02 c0       	rjmp	.+4      	; 0x126 <LCD8_PORT+0x90>
 122:	aa 0f       	add	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	2a 95       	dec	r18
 128:	e2 f7       	brpl	.-8      	; 0x122 <LCD8_PORT+0x8c>
 12a:	9d 01       	movw	r18, r26
 12c:	20 95       	com	r18
 12e:	2e 23       	and	r18, r30
 130:	25 b9       	out	0x05, r18	; 5
 132:	0f c0       	rjmp	.+30     	; 0x152 <LCD8_PORT+0xbc>
				} else if (pin <= 7){
 134:	28 30       	cpi	r18, 0x08	; 8
 136:	68 f4       	brcc	.+26     	; 0x152 <LCD8_PORT+0xbc>
				PORTD &= ~(1 << pin);
 138:	eb b1       	in	r30, 0x0b	; 11
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	db 01       	movw	r26, r22
 140:	02 c0       	rjmp	.+4      	; 0x146 <LCD8_PORT+0xb0>
 142:	aa 0f       	add	r26, r26
 144:	bb 1f       	adc	r27, r27
 146:	2a 95       	dec	r18
 148:	e2 f7       	brpl	.-8      	; 0x142 <LCD8_PORT+0xac>
 14a:	9d 01       	movw	r18, r26
 14c:	20 95       	com	r18
 14e:	2e 23       	and	r18, r30
 150:	2b b9       	out	0x0b, r18	; 11
	_delay_ms(10);
}

// D7...D0 E RS
void LCD8_PORT(uint16_t mascara) {
	for(int i = 0; i<10; i++){ // verifica cada posición
 152:	4f 5f       	subi	r20, 0xFF	; 255
 154:	5f 4f       	sbci	r21, 0xFF	; 255
 156:	4a 30       	cpi	r20, 0x0A	; 10
 158:	51 05       	cpc	r21, r1
 15a:	0c f4       	brge	.+2      	; 0x15e <LCD8_PORT+0xc8>
 15c:	9f cf       	rjmp	.-194    	; 0x9c <LCD8_PORT+0x6>
				} else if (pin <= 7){
				PORTD &= ~(1 << pin);
			}
		}
	}
	PORTD |= (1<<4);
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 61       	ori	r24, 0x10	; 16
 162:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	8f ed       	ldi	r24, 0xDF	; 223
 166:	9e e2       	ldi	r25, 0x2E	; 46
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD8_PORT+0xd2>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD8_PORT+0xd8>
 16e:	00 00       	nop
	_delay_ms(3);
	PORTD &= ~(1<<4);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8f 7e       	andi	r24, 0xEF	; 239
 174:	8b b9       	out	0x0b, r24	; 11
 176:	08 95       	ret

00000178 <initLCD8>:
// RS	E	D7... D0
unsigned char pines[10] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

void initLCD8(void){
	// salidas
	for (uint8_t i = 0; i < 10; i++) {
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	27 c0       	rjmp	.+78     	; 0x1ca <initLCD8+0x52>
		uint8_t pin = pines[i];
 17c:	e2 2f       	mov	r30, r18
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 81       	ld	r24, Z
		if (pin >= 8 && pin <= 13) {
 186:	98 ef       	ldi	r25, 0xF8	; 248
 188:	98 0f       	add	r25, r24
 18a:	96 30       	cpi	r25, 0x06	; 6
 18c:	78 f4       	brcc	.+30     	; 0x1ac <initLCD8+0x34>
			// Pines en PORTB
			DDRB |= (1 << (pin - 8));
 18e:	34 b1       	in	r19, 0x04	; 4
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 97       	sbiw	r24, 0x08	; 8
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	ba 01       	movw	r22, r20
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <initLCD8+0x28>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <initLCD8+0x24>
 1a4:	cb 01       	movw	r24, r22
 1a6:	83 2b       	or	r24, r19
 1a8:	84 b9       	out	0x04, r24	; 4
 1aa:	0e c0       	rjmp	.+28     	; 0x1c8 <initLCD8+0x50>
			} else if (pin <= 7) {
 1ac:	88 30       	cpi	r24, 0x08	; 8
 1ae:	60 f4       	brcc	.+24     	; 0x1c8 <initLCD8+0x50>
			// Pines en PORTD
			DDRD |= (1 << pin);
 1b0:	3a b1       	in	r19, 0x0a	; 10
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	ba 01       	movw	r22, r20
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <initLCD8+0x46>
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	8a 95       	dec	r24
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <initLCD8+0x42>
 1c2:	cb 01       	movw	r24, r22
 1c4:	83 2b       	or	r24, r19
 1c6:	8a b9       	out	0x0a, r24	; 10
// RS	E	D7... D0
unsigned char pines[10] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

void initLCD8(void){
	// salidas
	for (uint8_t i = 0; i < 10; i++) {
 1c8:	2f 5f       	subi	r18, 0xFF	; 255
 1ca:	2a 30       	cpi	r18, 0x0A	; 10
 1cc:	b8 f2       	brcs	.-82     	; 0x17c <initLCD8+0x4>
 1ce:	8f e5       	ldi	r24, 0x5F	; 95
 1d0:	9a ee       	ldi	r25, 0xEA	; 234
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <initLCD8+0x5a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <initLCD8+0x60>
 1d8:	00 00       	nop
			DDRD |= (1 << pin);
		}
	}
	_delay_ms(15);
	// Function SET
	LCD8_PORT(0b0011100000);
 1da:	80 ee       	ldi	r24, 0xE0	; 224
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 4b 00 	call	0x96	; 0x96 <LCD8_PORT>
 1e2:	8f e1       	ldi	r24, 0x1F	; 31
 1e4:	9e e4       	ldi	r25, 0x4E	; 78
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <initLCD8+0x6e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <initLCD8+0x74>
 1ec:	00 00       	nop
	_delay_ms(5);
	// display ON/ OFF
	LCD8_PORT(0b0000110000);
 1ee:	80 e3       	ldi	r24, 0x30	; 48
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 4b 00 	call	0x96	; 0x96 <LCD8_PORT>
 1f6:	8f e3       	ldi	r24, 0x3F	; 63
 1f8:	9c e9       	ldi	r25, 0x9C	; 156
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <initLCD8+0x82>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <initLCD8+0x88>
 200:	00 00       	nop
	_delay_ms(10);
	// Entre mode
	LCD8_PORT(0b0000011000);
 202:	88 e1       	ldi	r24, 0x18	; 24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 4b 00 	call	0x96	; 0x96 <LCD8_PORT>
 20a:	8f e3       	ldi	r24, 0x3F	; 63
 20c:	9c e9       	ldi	r25, 0x9C	; 156
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <initLCD8+0x96>
 212:	00 c0       	rjmp	.+0      	; 0x214 <initLCD8+0x9c>
 214:	00 00       	nop
	_delay_ms(10);
	//Clear display
	LCD8_PORT(0b0000000100);
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD8_PORT>
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	9c e9       	ldi	r25, 0x9C	; 156
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <initLCD8+0xaa>
 226:	00 c0       	rjmp	.+0      	; 0x228 <initLCD8+0xb0>
 228:	00 00       	nop
 22a:	08 95       	ret

0000022c <LCD8_CMD>:
	PORTD &= ~(1<<4);
}


void LCD8_CMD(uint16_t mascara){
	for(int i = 0; i<10; i++){
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	5d c0       	rjmp	.+186    	; 0x2ec <LCD8_CMD+0xc0>
		if(mascara&(1<<i)){
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	04 2e       	mov	r0, r20
 238:	02 c0       	rjmp	.+4      	; 0x23e <LCD8_CMD+0x12>
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <LCD8_CMD+0xe>
 242:	28 23       	and	r18, r24
 244:	39 23       	and	r19, r25
 246:	23 2b       	or	r18, r19
 248:	39 f1       	breq	.+78     	; 0x298 <LCD8_CMD+0x6c>
			uint8_t pin = pines[i];
 24a:	fa 01       	movw	r30, r20
 24c:	e0 50       	subi	r30, 0x00	; 0
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	20 81       	ld	r18, Z
			if(pin >= 8 && pin <= 13){
 252:	38 ef       	ldi	r19, 0xF8	; 248
 254:	32 0f       	add	r19, r18
 256:	36 30       	cpi	r19, 0x06	; 6
 258:	80 f4       	brcc	.+32     	; 0x27a <LCD8_CMD+0x4e>
				PORTB |= (1 << (pin - 8));
 25a:	e5 b1       	in	r30, 0x05	; 5
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	28 50       	subi	r18, 0x08	; 8
 260:	31 09       	sbc	r19, r1
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	db 01       	movw	r26, r22
 268:	02 c0       	rjmp	.+4      	; 0x26e <LCD8_CMD+0x42>
 26a:	aa 0f       	add	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	2a 95       	dec	r18
 270:	e2 f7       	brpl	.-8      	; 0x26a <LCD8_CMD+0x3e>
 272:	9d 01       	movw	r18, r26
 274:	2e 2b       	or	r18, r30
 276:	25 b9       	out	0x05, r18	; 5
 278:	37 c0       	rjmp	.+110    	; 0x2e8 <LCD8_CMD+0xbc>
				} else if (pin <= 7){
 27a:	28 30       	cpi	r18, 0x08	; 8
 27c:	a8 f5       	brcc	.+106    	; 0x2e8 <LCD8_CMD+0xbc>
				PORTD |= (1 << pin);
 27e:	eb b1       	in	r30, 0x0b	; 11
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	db 01       	movw	r26, r22
 286:	02 c0       	rjmp	.+4      	; 0x28c <LCD8_CMD+0x60>
 288:	aa 0f       	add	r26, r26
 28a:	bb 1f       	adc	r27, r27
 28c:	2a 95       	dec	r18
 28e:	e2 f7       	brpl	.-8      	; 0x288 <LCD8_CMD+0x5c>
 290:	9d 01       	movw	r18, r26
 292:	2e 2b       	or	r18, r30
 294:	2b b9       	out	0x0b, r18	; 11
 296:	28 c0       	rjmp	.+80     	; 0x2e8 <LCD8_CMD+0xbc>
			}
			} else {
			uint8_t pin = pines[i];
 298:	fa 01       	movw	r30, r20
 29a:	e0 50       	subi	r30, 0x00	; 0
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	20 81       	ld	r18, Z
			if(pin >= 8 && pin <= 13){
 2a0:	38 ef       	ldi	r19, 0xF8	; 248
 2a2:	32 0f       	add	r19, r18
 2a4:	36 30       	cpi	r19, 0x06	; 6
 2a6:	88 f4       	brcc	.+34     	; 0x2ca <LCD8_CMD+0x9e>
				PORTB &= ~(1 << (pin - 8));
 2a8:	e5 b1       	in	r30, 0x05	; 5
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	28 50       	subi	r18, 0x08	; 8
 2ae:	31 09       	sbc	r19, r1
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	db 01       	movw	r26, r22
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <LCD8_CMD+0x90>
 2b8:	aa 0f       	add	r26, r26
 2ba:	bb 1f       	adc	r27, r27
 2bc:	2a 95       	dec	r18
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <LCD8_CMD+0x8c>
 2c0:	9d 01       	movw	r18, r26
 2c2:	20 95       	com	r18
 2c4:	2e 23       	and	r18, r30
 2c6:	25 b9       	out	0x05, r18	; 5
 2c8:	0f c0       	rjmp	.+30     	; 0x2e8 <LCD8_CMD+0xbc>
				} else if (pin <= 7){
 2ca:	28 30       	cpi	r18, 0x08	; 8
 2cc:	68 f4       	brcc	.+26     	; 0x2e8 <LCD8_CMD+0xbc>
				PORTD &= ~(1 << pin);
 2ce:	eb b1       	in	r30, 0x0b	; 11
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	db 01       	movw	r26, r22
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <LCD8_CMD+0xb0>
 2d8:	aa 0f       	add	r26, r26
 2da:	bb 1f       	adc	r27, r27
 2dc:	2a 95       	dec	r18
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <LCD8_CMD+0xac>
 2e0:	9d 01       	movw	r18, r26
 2e2:	20 95       	com	r18
 2e4:	2e 23       	and	r18, r30
 2e6:	2b b9       	out	0x0b, r18	; 11
	PORTD &= ~(1<<4);
}


void LCD8_CMD(uint16_t mascara){
	for(int i = 0; i<10; i++){
 2e8:	4f 5f       	subi	r20, 0xFF	; 255
 2ea:	5f 4f       	sbci	r21, 0xFF	; 255
 2ec:	4a 30       	cpi	r20, 0x0A	; 10
 2ee:	51 05       	cpc	r21, r1
 2f0:	0c f4       	brge	.+2      	; 0x2f4 <LCD8_CMD+0xc8>
 2f2:	9f cf       	rjmp	.-194    	; 0x232 <LCD8_CMD+0x6>
 2f4:	8f ed       	ldi	r24, 0xDF	; 223
 2f6:	9e e2       	ldi	r25, 0x2E	; 46
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD8_CMD+0xcc>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD8_CMD+0xd2>
 2fe:	00 00       	nop
			}
		}
	}
	// agregando el Enable
	_delay_ms(3);
	PORTD |= (1<<4);
 300:	8b b1       	in	r24, 0x0b	; 11
 302:	80 61       	ori	r24, 0x10	; 16
 304:	8b b9       	out	0x0b, r24	; 11
 306:	af ed       	ldi	r26, 0xDF	; 223
 308:	be e2       	ldi	r27, 0x2E	; 46
 30a:	11 97       	sbiw	r26, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD8_CMD+0xde>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD8_CMD+0xe4>
 310:	00 00       	nop
	_delay_ms(3);
	PORTD &= ~(1<<4);
 312:	8b b1       	in	r24, 0x0b	; 11
 314:	8f 7e       	andi	r24, 0xEF	; 239
 316:	8b b9       	out	0x0b, r24	; 11
 318:	08 95       	ret

0000031a <LCD8_Write_Char>:
	uint8_to_string(v, str);
	LCD8_Write_String(str);
}

void LCD8_Write_Char(char c){
	uint16_t valor = (c << 2)|1; // un unico caracter
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
	LCD8_CMD(valor);
 324:	81 60       	ori	r24, 0x01	; 1
 326:	0e 94 16 01 	call	0x22c	; 0x22c <LCD8_CMD>
 32a:	08 95       	ret

0000032c <LCD8_Write_String>:
}


void LCD8_Write_String(char *a){
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	8c 01       	movw	r16, r24
	for(int i = 0; a[i] != '\0'; i++){ // recorre la cadena
 336:	c0 e0       	ldi	r28, 0x00	; 0
 338:	d0 e0       	ldi	r29, 0x00	; 0
 33a:	03 c0       	rjmp	.+6      	; 0x342 <LCD8_Write_String+0x16>
		LCD8_Write_Char(a[i]);
 33c:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD8_Write_Char>
	LCD8_CMD(valor);
}


void LCD8_Write_String(char *a){
	for(int i = 0; a[i] != '\0'; i++){ // recorre la cadena
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	f8 01       	movw	r30, r16
 344:	ec 0f       	add	r30, r28
 346:	fd 1f       	adc	r31, r29
 348:	80 81       	ld	r24, Z
 34a:	81 11       	cpse	r24, r1
 34c:	f7 cf       	rjmp	.-18     	; 0x33c <LCD8_Write_String+0x10>
		LCD8_Write_Char(a[i]);
	}
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	08 95       	ret

00000358 <LCD8_Set_Cursor>:


void LCD8_Set_Cursor(uint16_t c, uint16_t f){
	uint16_t coordenada;
	if (f == 0){ // primera fila
 358:	61 15       	cp	r22, r1
 35a:	71 05       	cpc	r23, r1
 35c:	41 f4       	brne	.+16     	; 0x36e <LCD8_Set_Cursor+0x16>
		coordenada = (c << 2) + 512;
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
		LCD8_CMD(coordenada);
 366:	9e 5f       	subi	r25, 0xFE	; 254
 368:	0e 94 16 01 	call	0x22c	; 0x22c <LCD8_CMD>
 36c:	08 95       	ret
		} else if (f == 1){ // segunda fila
 36e:	61 30       	cpi	r22, 0x01	; 1
 370:	71 05       	cpc	r23, r1
 372:	49 f4       	brne	.+18     	; 0x386 <LCD8_Set_Cursor+0x2e>
		coordenada = ((c + 64)<<2) + 512;
 374:	80 5c       	subi	r24, 0xC0	; 192
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
		LCD8_CMD(coordenada);
 380:	9e 5f       	subi	r25, 0xFE	; 254
 382:	0e 94 16 01 	call	0x22c	; 0x22c <LCD8_CMD>
 386:	08 95       	ret

00000388 <LCD8_Clear>:
	}
}

void LCD8_Clear(void){
	LCD8_CMD(0b100); // comando para borrar todo
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 16 01 	call	0x22c	; 0x22c <LCD8_CMD>
 390:	08 95       	ret

00000392 <UART_init>:
 #include "LCD_8b/LCD_8b.h"  // Incluir la librería LCD


 // --- Configuración UART ---
 void UART_init(uint16_t baudrate) {
	 uint16_t ubrr = F_CPU / 16 / baudrate - 1;
 392:	9c 01       	movw	r18, r24
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	60 e4       	ldi	r22, 0x40	; 64
 39a:	72 e4       	ldi	r23, 0x42	; 66
 39c:	8f e0       	ldi	r24, 0x0F	; 15
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 15 03 	call	0x62a	; 0x62a <__divmodsi4>
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	31 09       	sbc	r19, r1
	 UBRR0H = (ubrr >> 8);
 3a8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	 UBRR0L = ubrr;
 3ac:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 UCSR0B = (1 << TXEN0);   // Habilita transmisión
 3b0:	88 e0       	ldi	r24, 0x08	; 8
 3b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	 UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Modo de 8 bits
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3bc:	08 95       	ret

000003be <UART_sendChar>:
 }

 void UART_sendChar(char c) {
	 while (!(UCSR0A & (1 << UDRE0))); // Esperar buffer vacío
 3be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3c2:	95 ff       	sbrs	r25, 5
 3c4:	fc cf       	rjmp	.-8      	; 0x3be <UART_sendChar>
	 UDR0 = c;
 3c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3ca:	08 95       	ret

000003cc <UART_sendString>:
 }

 void UART_sendString(const char* str) {
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	ec 01       	movw	r28, r24
	 while (*str) {
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <UART_sendString+0xe>
		 UART_sendChar(*str++);
 3d4:	21 96       	adiw	r28, 0x01	; 1
 3d6:	0e 94 df 01 	call	0x3be	; 0x3be <UART_sendChar>
	 while (!(UCSR0A & (1 << UDRE0))); // Esperar buffer vacío
	 UDR0 = c;
 }

 void UART_sendString(const char* str) {
	 while (*str) {
 3da:	88 81       	ld	r24, Y
 3dc:	81 11       	cpse	r24, r1
 3de:	fa cf       	rjmp	.-12     	; 0x3d4 <UART_sendString+0x8>
		 UART_sendChar(*str++);
	 }
 }
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <main>:

 // --- Definir pines ---
 #define HUMEDAD_ANALOG PC1  // A1 en Arduino (sensor de humedad)
 #define LUZ_ANALOG PC2      // A2 en Arduino (sensor LDR analógico)

 int main(void) {
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	a8 97       	sbiw	r28, 0x28	; 40
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
	 // Configurar UART
	 UART_init(115200);
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	92 ec       	ldi	r25, 0xC2	; 194
 3fe:	0e 94 c9 01 	call	0x392	; 0x392 <UART_init>

	 // Inicializar el LCD
	 initLCD8();
 402:	0e 94 bc 00 	call	0x178	; 0x178 <initLCD8>
	 LCD8_Clear();  // Limpiar pantalla al inicio
 406:	0e 94 c4 01 	call	0x388	; 0x388 <LCD8_Clear>

	 // Mostrar mensaje inicial en LCD
	 LCD8_Set_Cursor(0, 0);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 ac 01 	call	0x358	; 0x358 <LCD8_Set_Cursor>
	 LCD8_Write_String("Iniciando...");
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 96 01 	call	0x32c	; 0x32c <LCD8_Write_String>
 41e:	2f ef       	ldi	r18, 0xFF	; 255
 420:	87 ea       	ldi	r24, 0xA7	; 167
 422:	91 e6       	ldi	r25, 0x61	; 97
 424:	21 50       	subi	r18, 0x01	; 1
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	90 40       	sbci	r25, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
	 _delay_ms(2000);  // Esperar 2 segundos

	 // Configurar A1 y A2 como entradas analógicas
	 DDRC &= ~((1 << HUMEDAD_ANALOG) | (1 << LUZ_ANALOG));
 430:	87 b1       	in	r24, 0x07	; 7
 432:	89 7f       	andi	r24, 0xF9	; 249
 434:	87 b9       	out	0x07, r24	; 7

	 // Habilitar ADC
	 ADMUX = (1 << REFS0); // Referencia en AVCC
 436:	80 e4       	ldi	r24, 0x40	; 64
 438:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	 ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler de 128
 43c:	87 e8       	ldi	r24, 0x87	; 135
 43e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	 while (1) {
		 // --- Leer Humedad (analógica en A1) ---
		 ADMUX = (ADMUX & 0xF0) | (HUMEDAD_ANALOG & 0x0F); // Seleccionar canal PC1 (A1)
 442:	ec e7       	ldi	r30, 0x7C	; 124
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	80 7f       	andi	r24, 0xF0	; 240
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	80 83       	st	Z, r24
		 ADCSRA |= (1 << ADSC); // Iniciar conversión
 44e:	ea e7       	ldi	r30, 0x7A	; 122
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	80 64       	ori	r24, 0x40	; 64
 456:	80 83       	st	Z, r24
		 while (ADCSRA & (1 << ADSC)); // Esperar resultado
 458:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 45c:	86 fd       	sbrc	r24, 6
 45e:	fc cf       	rjmp	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
		 uint16_t humedad = ADC;
 460:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 464:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

		 // Determinar SECO o HÚMEDO
		 char estado_humedad[10];
		 if (humedad > 700) {
 468:	2d eb       	ldi	r18, 0xBD	; 189
 46a:	e2 16       	cp	r14, r18
 46c:	22 e0       	ldi	r18, 0x02	; 2
 46e:	f2 06       	cpc	r15, r18
 470:	50 f0       	brcs	.+20     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
			 strcpy(estado_humedad, "SECO");
 472:	85 e0       	ldi	r24, 0x05	; 5
 474:	e7 e1       	ldi	r30, 0x17	; 23
 476:	f1 e0       	ldi	r31, 0x01	; 1
 478:	de 01       	movw	r26, r28
 47a:	5f 96       	adiw	r26, 0x1f	; 31
 47c:	01 90       	ld	r0, Z+
 47e:	0d 92       	st	X+, r0
 480:	8a 95       	dec	r24
 482:	e1 f7       	brne	.-8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 484:	09 c0       	rjmp	.+18     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			 } else {
			 strcpy(estado_humedad, "HÚMEDO");
 486:	87 e0       	ldi	r24, 0x07	; 7
 488:	ec e1       	ldi	r30, 0x1C	; 28
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	de 01       	movw	r26, r28
 48e:	5f 96       	adiw	r26, 0x1f	; 31
 490:	01 90       	ld	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	8a 95       	dec	r24
 496:	e1 f7       	brne	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		 }

		 // --- Leer Luz (analógica en A2) ---
		 ADMUX = (ADMUX & 0xF0) | (LUZ_ANALOG & 0x0F); // Seleccionar canal PC2 (A2)
 498:	ec e7       	ldi	r30, 0x7C	; 124
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	80 7f       	andi	r24, 0xF0	; 240
 4a0:	82 60       	ori	r24, 0x02	; 2
 4a2:	80 83       	st	Z, r24
		 ADCSRA |= (1 << ADSC); // Iniciar conversión
 4a4:	ea e7       	ldi	r30, 0x7A	; 122
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	80 64       	ori	r24, 0x40	; 64
 4ac:	80 83       	st	Z, r24
		 while (ADCSRA & (1 << ADSC)); // Esperar resultado
 4ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 4b2:	86 fd       	sbrc	r24, 6
 4b4:	fc cf       	rjmp	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		 uint16_t luz = ADC;
 4b6:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 4ba:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4be:	4a e0       	ldi	r20, 0x0A	; 10
 4c0:	be 01       	movw	r22, r28
 4c2:	6b 5e       	subi	r22, 0xEB	; 235
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	c8 01       	movw	r24, r16
 4c8:	0e 94 34 03 	call	0x668	; 0x668 <__itoa_ncheck>

		 // --- Depuración: Mostrar valor de luz en UART ---
		 char buffer_luz[10];
		 itoa(luz, buffer_luz, 10);
		 UART_sendString("Valor luz (A2) crudo: ");
 4cc:	83 e2       	ldi	r24, 0x23	; 35
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
		 UART_sendString(buffer_luz);
 4d4:	ce 01       	movw	r24, r28
 4d6:	45 96       	adiw	r24, 0x15	; 21
 4d8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
		 UART_sendString("\r\n");
 4dc:	8c e9       	ldi	r24, 0x9C	; 156
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>

		 // Determinar CLARO u OSCURO según el nuevo umbral (800)
		 char estado_luz[10];
		 if (luz > 800) {  // Umbral ajustado a 800
 4e4:	01 32       	cpi	r16, 0x21	; 33
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	18 07       	cpc	r17, r24
 4ea:	50 f0       	brcs	.+20     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
			 strcpy(estado_luz, "OSCURO");
 4ec:	87 e0       	ldi	r24, 0x07	; 7
 4ee:	ea e3       	ldi	r30, 0x3A	; 58
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	de 01       	movw	r26, r28
 4f4:	1b 96       	adiw	r26, 0x0b	; 11
 4f6:	01 90       	ld	r0, Z+
 4f8:	0d 92       	st	X+, r0
 4fa:	8a 95       	dec	r24
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4fe:	09 c0       	rjmp	.+18     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
			 } else {
			 strcpy(estado_luz, "CLARO");
 500:	86 e0       	ldi	r24, 0x06	; 6
 502:	e1 e4       	ldi	r30, 0x41	; 65
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	de 01       	movw	r26, r28
 508:	1b 96       	adiw	r26, 0x0b	; 11
 50a:	01 90       	ld	r0, Z+
 50c:	0d 92       	st	X+, r0
 50e:	8a 95       	dec	r24
 510:	e1 f7       	brne	.-8      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
		 }

		 // --- Mostrar en LCD ---
		 LCD8_Clear();  // Limpiar pantalla
 512:	0e 94 c4 01 	call	0x388	; 0x388 <LCD8_Clear>
		 LCD8_Set_Cursor(0, 0);  // Primera línea
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 ac 01 	call	0x358	; 0x358 <LCD8_Set_Cursor>
		 LCD8_Write_String("Humedad: ");
 522:	84 e6       	ldi	r24, 0x64	; 100
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 96 01 	call	0x32c	; 0x32c <LCD8_Write_String>
		 LCD8_Write_String(estado_humedad);  // Mostrar SECO o HÚMEDO
 52a:	ce 01       	movw	r24, r28
 52c:	4f 96       	adiw	r24, 0x1f	; 31
 52e:	0e 94 96 01 	call	0x32c	; 0x32c <LCD8_Write_String>

		 LCD8_Set_Cursor(0, 1);  // Segunda línea
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 ac 01 	call	0x358	; 0x358 <LCD8_Set_Cursor>
		 LCD8_Write_String("Luz: ");
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 96 01 	call	0x32c	; 0x32c <LCD8_Write_String>
		 LCD8_Write_String(estado_luz);  // Mostrar CLARO u OSCURO
 546:	ce 01       	movw	r24, r28
 548:	0b 96       	adiw	r24, 0x0b	; 11
 54a:	0e 94 96 01 	call	0x32c	; 0x32c <LCD8_Write_String>

		 // --- Enviar por UART ---
		 char buffer[10];
		 UART_sendString("Humedad Tierra (A1): ");
 54e:	87 e4       	ldi	r24, 0x47	; 71
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
 556:	4a e0       	ldi	r20, 0x0A	; 10
 558:	be 01       	movw	r22, r28
 55a:	6f 5f       	subi	r22, 0xFF	; 255
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	c7 01       	movw	r24, r14
 560:	0e 94 34 03 	call	0x668	; 0x668 <__itoa_ncheck>
		 itoa(humedad, buffer, 10);
		 UART_sendString(buffer);
 564:	ce 01       	movw	r24, r28
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
		 UART_sendString("\r\n");
 56c:	8c e9       	ldi	r24, 0x9C	; 156
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>

		 UART_sendString("Estado Humedad: ");
 574:	8d e5       	ldi	r24, 0x5D	; 93
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
		 UART_sendString(estado_humedad);
 57c:	ce 01       	movw	r24, r28
 57e:	4f 96       	adiw	r24, 0x1f	; 31
 580:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
		 UART_sendString("\r\n");
 584:	8c e9       	ldi	r24, 0x9C	; 156
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>

		 UART_sendString("Luz (A2): ");
 58c:	8e e6       	ldi	r24, 0x6E	; 110
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
 594:	4a e0       	ldi	r20, 0x0A	; 10
 596:	be 01       	movw	r22, r28
 598:	6f 5f       	subi	r22, 0xFF	; 255
 59a:	7f 4f       	sbci	r23, 0xFF	; 255
 59c:	c8 01       	movw	r24, r16
 59e:	0e 94 34 03 	call	0x668	; 0x668 <__itoa_ncheck>
		 itoa(luz, buffer, 10);
		 UART_sendString(buffer);
 5a2:	ce 01       	movw	r24, r28
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
		 UART_sendString("\r\n");
 5aa:	8c e9       	ldi	r24, 0x9C	; 156
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>

		 UART_sendString("Estado Luz: ");
 5b2:	89 e7       	ldi	r24, 0x79	; 121
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
		 UART_sendString(estado_luz);
 5ba:	ce 01       	movw	r24, r28
 5bc:	0b 96       	adiw	r24, 0x0b	; 11
 5be:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
		 UART_sendString("\r\n");
 5c2:	8c e9       	ldi	r24, 0x9C	; 156
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>

		 UART_sendString("----------------------\r\n");
 5ca:	86 e8       	ldi	r24, 0x86	; 134
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_sendString>
 5d2:	9f ef       	ldi	r25, 0xFF	; 255
 5d4:	27 ea       	ldi	r18, 0xA7	; 167
 5d6:	81 e6       	ldi	r24, 0x61	; 97
 5d8:	91 50       	subi	r25, 0x01	; 1
 5da:	20 40       	sbci	r18, 0x00	; 0
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 5e2:	00 00       	nop
		 _delay_ms(2000);
	 }
 5e4:	2e cf       	rjmp	.-420    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>

000005e6 <__udivmodsi4>:
 5e6:	a1 e2       	ldi	r26, 0x21	; 33
 5e8:	1a 2e       	mov	r1, r26
 5ea:	aa 1b       	sub	r26, r26
 5ec:	bb 1b       	sub	r27, r27
 5ee:	fd 01       	movw	r30, r26
 5f0:	0d c0       	rjmp	.+26     	; 0x60c <__udivmodsi4_ep>

000005f2 <__udivmodsi4_loop>:
 5f2:	aa 1f       	adc	r26, r26
 5f4:	bb 1f       	adc	r27, r27
 5f6:	ee 1f       	adc	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	a2 17       	cp	r26, r18
 5fc:	b3 07       	cpc	r27, r19
 5fe:	e4 07       	cpc	r30, r20
 600:	f5 07       	cpc	r31, r21
 602:	20 f0       	brcs	.+8      	; 0x60c <__udivmodsi4_ep>
 604:	a2 1b       	sub	r26, r18
 606:	b3 0b       	sbc	r27, r19
 608:	e4 0b       	sbc	r30, r20
 60a:	f5 0b       	sbc	r31, r21

0000060c <__udivmodsi4_ep>:
 60c:	66 1f       	adc	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	88 1f       	adc	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	1a 94       	dec	r1
 616:	69 f7       	brne	.-38     	; 0x5f2 <__udivmodsi4_loop>
 618:	60 95       	com	r22
 61a:	70 95       	com	r23
 61c:	80 95       	com	r24
 61e:	90 95       	com	r25
 620:	9b 01       	movw	r18, r22
 622:	ac 01       	movw	r20, r24
 624:	bd 01       	movw	r22, r26
 626:	cf 01       	movw	r24, r30
 628:	08 95       	ret

0000062a <__divmodsi4>:
 62a:	05 2e       	mov	r0, r21
 62c:	97 fb       	bst	r25, 7
 62e:	1e f4       	brtc	.+6      	; 0x636 <__divmodsi4+0xc>
 630:	00 94       	com	r0
 632:	0e 94 2c 03 	call	0x658	; 0x658 <__negsi2>
 636:	57 fd       	sbrc	r21, 7
 638:	07 d0       	rcall	.+14     	; 0x648 <__divmodsi4_neg2>
 63a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__udivmodsi4>
 63e:	07 fc       	sbrc	r0, 7
 640:	03 d0       	rcall	.+6      	; 0x648 <__divmodsi4_neg2>
 642:	4e f4       	brtc	.+18     	; 0x656 <__divmodsi4_exit>
 644:	0c 94 2c 03 	jmp	0x658	; 0x658 <__negsi2>

00000648 <__divmodsi4_neg2>:
 648:	50 95       	com	r21
 64a:	40 95       	com	r20
 64c:	30 95       	com	r19
 64e:	21 95       	neg	r18
 650:	3f 4f       	sbci	r19, 0xFF	; 255
 652:	4f 4f       	sbci	r20, 0xFF	; 255
 654:	5f 4f       	sbci	r21, 0xFF	; 255

00000656 <__divmodsi4_exit>:
 656:	08 95       	ret

00000658 <__negsi2>:
 658:	90 95       	com	r25
 65a:	80 95       	com	r24
 65c:	70 95       	com	r23
 65e:	61 95       	neg	r22
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	8f 4f       	sbci	r24, 0xFF	; 255
 664:	9f 4f       	sbci	r25, 0xFF	; 255
 666:	08 95       	ret

00000668 <__itoa_ncheck>:
 668:	bb 27       	eor	r27, r27
 66a:	4a 30       	cpi	r20, 0x0A	; 10
 66c:	31 f4       	brne	.+12     	; 0x67a <__itoa_ncheck+0x12>
 66e:	99 23       	and	r25, r25
 670:	22 f4       	brpl	.+8      	; 0x67a <__itoa_ncheck+0x12>
 672:	bd e2       	ldi	r27, 0x2D	; 45
 674:	90 95       	com	r25
 676:	81 95       	neg	r24
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	0c 94 40 03 	jmp	0x680	; 0x680 <__utoa_common>

0000067e <__utoa_ncheck>:
 67e:	bb 27       	eor	r27, r27

00000680 <__utoa_common>:
 680:	fb 01       	movw	r30, r22
 682:	55 27       	eor	r21, r21
 684:	aa 27       	eor	r26, r26
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	aa 1f       	adc	r26, r26
 68c:	a4 17       	cp	r26, r20
 68e:	10 f0       	brcs	.+4      	; 0x694 <__utoa_common+0x14>
 690:	a4 1b       	sub	r26, r20
 692:	83 95       	inc	r24
 694:	50 51       	subi	r21, 0x10	; 16
 696:	b9 f7       	brne	.-18     	; 0x686 <__utoa_common+0x6>
 698:	a0 5d       	subi	r26, 0xD0	; 208
 69a:	aa 33       	cpi	r26, 0x3A	; 58
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <__utoa_common+0x20>
 69e:	a9 5d       	subi	r26, 0xD9	; 217
 6a0:	a1 93       	st	Z+, r26
 6a2:	00 97       	sbiw	r24, 0x00	; 0
 6a4:	79 f7       	brne	.-34     	; 0x684 <__utoa_common+0x4>
 6a6:	b1 11       	cpse	r27, r1
 6a8:	b1 93       	st	Z+, r27
 6aa:	11 92       	st	Z+, r1
 6ac:	cb 01       	movw	r24, r22
 6ae:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <strrev>

000006b2 <strrev>:
 6b2:	dc 01       	movw	r26, r24
 6b4:	fc 01       	movw	r30, r24
 6b6:	67 2f       	mov	r22, r23
 6b8:	71 91       	ld	r23, Z+
 6ba:	77 23       	and	r23, r23
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <strrev+0x4>
 6be:	32 97       	sbiw	r30, 0x02	; 2
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <strrev+0x18>
 6c2:	7c 91       	ld	r23, X
 6c4:	6d 93       	st	X+, r22
 6c6:	70 83       	st	Z, r23
 6c8:	62 91       	ld	r22, -Z
 6ca:	ae 17       	cp	r26, r30
 6cc:	bf 07       	cpc	r27, r31
 6ce:	c8 f3       	brcs	.-14     	; 0x6c2 <strrev+0x10>
 6d0:	08 95       	ret

000006d2 <_exit>:
 6d2:	f8 94       	cli

000006d4 <__stop_program>:
 6d4:	ff cf       	rjmp	.-2      	; 0x6d4 <__stop_program>
